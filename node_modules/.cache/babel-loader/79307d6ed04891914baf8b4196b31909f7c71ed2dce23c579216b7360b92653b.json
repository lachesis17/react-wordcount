{"ast":null,"code":"import React,{useState}from'react';import'./App.css';import TextInput from'./TextInput';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function format_result(result){const result_formatted=[\"Word count: \".concat(result['Word count'],\",\"),\"Average word length: \".concat(result['Average word length'],\",\"),'Number of words of length:'];for(const[key,value]of Object.entries(result['Number of words of length'])){result_formatted.push(\"  - \\\"\".concat(key,\"\\\": \").concat(value));}const most_freq_lengths=Object.keys(result).find(key=>key.startsWith('The most frequently occurring word length is'));result_formatted.push(\"\".concat(most_freq_lengths,\": \").concat(result[most_freq_lengths]));return result_formatted.join('\\n');}function App(){const[result,return_results]=useState(null);const handle_entry=async text=>{try{const response=await fetch('http://localhost:5000/count-words',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({file:text})});if(response.ok){const data=await response.json();const result_formatted=format_result(data);return_results(result_formatted);}else{console.error('Server returned an error');}}catch(error){console.error('Error occurred during fetch:',error);}};return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsxs(\"header\",{className:\"App-header\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"Headers\",children:\"Gimme some words. I will count them and stuff.\"}),/*#__PURE__*/_jsx(TextInput,{className:\"Text_Submit\",onSubmit:handle_entry})]})});}export default App;","map":{"version":3,"names":["React","useState","TextInput","jsx","_jsx","jsxs","_jsxs","format_result","result","result_formatted","concat","key","value","Object","entries","push","most_freq_lengths","keys","find","startsWith","join","App","return_results","handle_entry","text","response","fetch","method","headers","body","JSON","stringify","file","ok","data","json","console","error","className","children","onSubmit"],"sources":["C:/Python_Tools/React_Words/react-wordcount/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport TextInput from './TextInput';\n\nfunction format_result(result) {\n  const result_formatted = [\n    `Word count: ${result['Word count']},`,\n    `Average word length: ${result['Average word length']},`,\n    'Number of words of length:',\n  ];\n\n  for (const [key, value] of Object.entries(result['Number of words of length'])) {\n    result_formatted.push(`  - \"${key}\": ${value}`);\n  }\n\n  const most_freq_lengths = Object.keys(result).find((key) =>\n    key.startsWith('The most frequently occurring word length is')\n  );\n  result_formatted.push(`${most_freq_lengths}: ${result[most_freq_lengths]}`);\n\n  return result_formatted.join('\\n');\n}\n\nfunction App() {\n  const [result, return_results] = useState(null);\n\n  const handle_entry = async (text) => {\n    try {\n      const response = await fetch('http://localhost:5000/count-words', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ file: text }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        const result_formatted = format_result(data);\n        return_results(result_formatted);\n      } else {\n        console.error('Server returned an error');\n      }\n    } catch (error) {\n      console.error('Error occurred during fetch:', error);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className='Headers'>Gimme some words. I will count them and stuff.</h1>\n        <TextInput className='Text_Submit' onSubmit={handle_entry} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,WAAW,CAClB,MAAO,CAAAC,SAAS,KAAM,aAAa,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAEpC,QAAS,CAAAC,aAAaA,CAACC,MAAM,CAAE,CAC7B,KAAM,CAAAC,gBAAgB,CAAG,gBAAAC,MAAA,CACRF,MAAM,CAAC,YAAY,CAAC,8BAAAE,MAAA,CACXF,MAAM,CAAC,qBAAqB,CAAC,MACrD,4BAA4B,CAC7B,CAED,IAAK,KAAM,CAACG,GAAG,CAAEC,KAAK,CAAC,EAAI,CAAAC,MAAM,CAACC,OAAO,CAACN,MAAM,CAAC,2BAA2B,CAAC,CAAC,CAAE,CAC9EC,gBAAgB,CAACM,IAAI,UAAAL,MAAA,CAASC,GAAG,SAAAD,MAAA,CAAME,KAAK,CAAE,CAAC,CACjD,CAEA,KAAM,CAAAI,iBAAiB,CAAGH,MAAM,CAACI,IAAI,CAACT,MAAM,CAAC,CAACU,IAAI,CAAEP,GAAG,EACrDA,GAAG,CAACQ,UAAU,CAAC,8CAA8C,CAC/D,CAAC,CACDV,gBAAgB,CAACM,IAAI,IAAAL,MAAA,CAAIM,iBAAiB,OAAAN,MAAA,CAAKF,MAAM,CAACQ,iBAAiB,CAAC,CAAE,CAAC,CAE3E,MAAO,CAAAP,gBAAgB,CAACW,IAAI,CAAC,IAAI,CAAC,CACpC,CAEA,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,KAAM,CAACb,MAAM,CAAEc,cAAc,CAAC,CAAGrB,QAAQ,CAAC,IAAI,CAAC,CAE/C,KAAM,CAAAsB,YAAY,CAAG,KAAO,CAAAC,IAAI,EAAK,CACnC,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,mCAAmC,CAAE,CAChEC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAEC,IAAI,CAAER,IAAK,CAAC,CACrC,CAAC,CAAC,CAEF,GAAIC,QAAQ,CAACQ,EAAE,CAAE,CACf,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAT,QAAQ,CAACU,IAAI,CAAC,CAAC,CAClC,KAAM,CAAA1B,gBAAgB,CAAGF,aAAa,CAAC2B,IAAI,CAAC,CAC5CZ,cAAc,CAACb,gBAAgB,CAAC,CAClC,CAAC,IAAM,CACL2B,OAAO,CAACC,KAAK,CAAC,0BAA0B,CAAC,CAC3C,CACF,CAAE,MAAOA,KAAK,CAAE,CACdD,OAAO,CAACC,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CACtD,CACF,CAAC,CAED,mBACEjC,IAAA,QAAKkC,SAAS,CAAC,KAAK,CAAAC,QAAA,cAClBjC,KAAA,WAAQgC,SAAS,CAAC,YAAY,CAAAC,QAAA,eAC5BnC,IAAA,OAAIkC,SAAS,CAAC,SAAS,CAAAC,QAAA,CAAC,gDAA8C,CAAI,CAAC,cAC3EnC,IAAA,CAACF,SAAS,EAACoC,SAAS,CAAC,aAAa,CAACE,QAAQ,CAAEjB,YAAa,CAAE,CAAC,EACvD,CAAC,CACN,CAAC,CAEV,CAEA,cAAe,CAAAF,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}