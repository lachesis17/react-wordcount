{"ast":null,"code":"var _jsxFileName = \"C:\\\\Python_Tools\\\\React_Words\\\\react-wordcount\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport TextInput from './TextInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction format_result(result) {\n  const result_formatted = [`Word count: ${result['Word count']},`, `Average word length: ${result['Average word length']},`, 'Number of words of length:'];\n  for (const [key, value] of Object.entries(result['Number of words of length'])) {\n    result_formatted.push(`  - \"${key}\": ${value}`);\n  }\n  const mostFreqLengthsKey = Object.keys(result).find(key => key.startsWith('The most frequently occurring word length is'));\n  result_formatted.push(`${mostFreqLengthsKey}: ${result[mostFreqLengthsKey]}`);\n  return result_formatted.join('\\n');\n}\nfunction App() {\n  _s();\n  const [result, setResult] = useState(null);\n  const handle_entry = async text => {\n    try {\n      const response = await fetch('http://localhost:5000/count-words', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          file: text\n        })\n      });\n      if (response.ok) {\n        const resultData = await response.json();\n        const result_formatted = format_result(resultData);\n        setResult(result_formatted);\n      } else {\n        console.error('Server returned an error');\n      }\n    } catch (error) {\n      console.error('Error occurred during fetch:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"Headers\",\n        children: \"Gimme some words. I will count them and stuff.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n        className: \"Text_Submit\",\n        onSubmit: handle_entry\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"X4bz0btR6WTE+CkTerVmRyY/5iQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","TextInput","jsxDEV","_jsxDEV","format_result","result","result_formatted","key","value","Object","entries","push","mostFreqLengthsKey","keys","find","startsWith","join","App","_s","setResult","handle_entry","text","response","fetch","method","headers","body","JSON","stringify","file","ok","resultData","json","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","_c","$RefreshReg$"],"sources":["C:/Python_Tools/React_Words/react-wordcount/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport TextInput from './TextInput';\n\nfunction format_result(result) {\n  const result_formatted = [\n    `Word count: ${result['Word count']},`,\n    `Average word length: ${result['Average word length']},`,\n    'Number of words of length:',\n  ];\n\n  for (const [key, value] of Object.entries(result['Number of words of length'])) {\n    result_formatted.push(`  - \"${key}\": ${value}`);\n  }\n\n  const mostFreqLengthsKey = Object.keys(result).find((key) =>\n    key.startsWith('The most frequently occurring word length is')\n  );\n  result_formatted.push(`${mostFreqLengthsKey}: ${result[mostFreqLengthsKey]}`);\n\n  return result_formatted.join('\\n');\n}\n\nfunction App() {\n  const [result, setResult] = useState(null);\n\n  const handle_entry = async (text) => {\n    try {\n      const response = await fetch('http://localhost:5000/count-words', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ file: text }),\n      });\n\n      if (response.ok) {\n        const resultData = await response.json();\n        const result_formatted = format_result(resultData);\n        setResult(result_formatted);\n      } else {\n        console.error('Server returned an error');\n      }\n    } catch (error) {\n      console.error('Error occurred during fetch:', error);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className='Headers'>Gimme some words. I will count them and stuff.</h1>\n        <TextInput className='Text_Submit' onSubmit={handle_entry} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW;AAClB,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,SAASC,aAAaA,CAACC,MAAM,EAAE;EAC7B,MAAMC,gBAAgB,GAAG,CACtB,eAAcD,MAAM,CAAC,YAAY,CAAE,GAAE,EACrC,wBAAuBA,MAAM,CAAC,qBAAqB,CAAE,GAAE,EACxD,4BAA4B,CAC7B;EAED,KAAK,MAAM,CAACE,GAAG,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACL,MAAM,CAAC,2BAA2B,CAAC,CAAC,EAAE;IAC9EC,gBAAgB,CAACK,IAAI,CAAE,QAAOJ,GAAI,MAAKC,KAAM,EAAC,CAAC;EACjD;EAEA,MAAMI,kBAAkB,GAAGH,MAAM,CAACI,IAAI,CAACR,MAAM,CAAC,CAACS,IAAI,CAAEP,GAAG,IACtDA,GAAG,CAACQ,UAAU,CAAC,8CAA8C,CAC/D,CAAC;EACDT,gBAAgB,CAACK,IAAI,CAAE,GAAEC,kBAAmB,KAAIP,MAAM,CAACO,kBAAkB,CAAE,EAAC,CAAC;EAE7E,OAAON,gBAAgB,CAACU,IAAI,CAAC,IAAI,CAAC;AACpC;AAEA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACb,MAAM,EAAEc,SAAS,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAE1C,MAAMoB,YAAY,GAAG,MAAOC,IAAI,IAAK;IACnC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,EAAE;QAChEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,IAAI,EAAER;QAAK,CAAC;MACrC,CAAC,CAAC;MAEF,IAAIC,QAAQ,CAACQ,EAAE,EAAE;QACf,MAAMC,UAAU,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;QACxC,MAAM1B,gBAAgB,GAAGF,aAAa,CAAC2B,UAAU,CAAC;QAClDZ,SAAS,CAACb,gBAAgB,CAAC;MAC7B,CAAC,MAAM;QACL2B,OAAO,CAACC,KAAK,CAAC,0BAA0B,CAAC;MAC3C;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF,CAAC;EAED,oBACE/B,OAAA;IAAKgC,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClBjC,OAAA;MAAQgC,SAAS,EAAC,YAAY;MAAAC,QAAA,gBAC5BjC,OAAA;QAAIgC,SAAS,EAAC,SAAS;QAAAC,QAAA,EAAC;MAA8C;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3ErC,OAAA,CAACF,SAAS;QAACkC,SAAS,EAAC,aAAa;QAACM,QAAQ,EAAErB;MAAa;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAACtB,EAAA,CAjCQD,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AAmCZ,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}