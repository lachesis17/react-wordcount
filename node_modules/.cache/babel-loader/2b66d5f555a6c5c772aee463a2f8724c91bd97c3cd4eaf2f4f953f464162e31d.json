{"ast":null,"code":"// App.js\nimport React,{useState}from'react';import'./App.css';import TextInput from'./TextInput';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function formatResult(result){const formattedResult=[\"Word count: \".concat(result['Word count'],\",\"),\"Average word length: \".concat(result['Average word length'],\",\"),'Number of words of length:'];for(const[key,value]of Object.entries(result['Number of words of length'])){formattedResult.push(\"  - \\\"\".concat(key,\"\\\": \").concat(value));}const mostFreqLengthsKey=Object.keys(result).find(key=>key.startsWith('The most frequently occurring word length is'));formattedResult.push(\"\".concat(mostFreqLengthsKey,\": \").concat(result[mostFreqLengthsKey]));return formattedResult.join('\\n');}function App(){const[result,setResult]=useState(null);const handleTextSubmit=async text=>{try{const response=await fetch('http://localhost:5000/count-words',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({file:text})});if(response.ok){const resultData=await response.json();const formattedResult=formatResult(resultData);setResult(formattedResult);}else{console.error('Server returned an error');}}catch(error){console.error('Error occurred during fetch:',error);}};return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsxs(\"header\",{className:\"App-header\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"Headers\",children:\"Gimme some words. I will count them and stuff.\"}),/*#__PURE__*/_jsx(TextInput,{className:\"Text_Submit\",onSubmit:handleTextSubmit})]})});}export default App;","map":{"version":3,"names":["React","useState","TextInput","jsx","_jsx","jsxs","_jsxs","formatResult","result","formattedResult","concat","key","value","Object","entries","push","mostFreqLengthsKey","keys","find","startsWith","join","App","setResult","handleTextSubmit","text","response","fetch","method","headers","body","JSON","stringify","file","ok","resultData","json","console","error","className","children","onSubmit"],"sources":["C:/Python_Tools/React_Words/react-wordcount/src/App.js"],"sourcesContent":["// App.js\nimport React, { useState } from 'react';\nimport './App.css';\nimport TextInput from './TextInput';\n\nfunction formatResult(result) {\n  const formattedResult = [\n    `Word count: ${result['Word count']},`,\n    `Average word length: ${result['Average word length']},`,\n    'Number of words of length:',\n  ];\n\n  for (const [key, value] of Object.entries(result['Number of words of length'])) {\n    formattedResult.push(`  - \"${key}\": ${value}`);\n  }\n\n  const mostFreqLengthsKey = Object.keys(result).find((key) =>\n    key.startsWith('The most frequently occurring word length is')\n  );\n  formattedResult.push(`${mostFreqLengthsKey}: ${result[mostFreqLengthsKey]}`);\n\n  return formattedResult.join('\\n');\n}\n\nfunction App() {\n  const [result, setResult] = useState(null);\n\n  const handleTextSubmit = async (text) => {\n    try {\n      const response = await fetch('http://localhost:5000/count-words', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ file: text }),\n      });\n\n      if (response.ok) {\n        const resultData = await response.json();\n        const formattedResult = formatResult(resultData);\n        setResult(formattedResult);\n      } else {\n        console.error('Server returned an error');\n      }\n    } catch (error) {\n      console.error('Error occurred during fetch:', error);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className='Headers'>Gimme some words. I will count them and stuff.</h1>\n        <TextInput className='Text_Submit' onSubmit={handleTextSubmit} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,WAAW,CAClB,MAAO,CAAAC,SAAS,KAAM,aAAa,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAEpC,QAAS,CAAAC,YAAYA,CAACC,MAAM,CAAE,CAC5B,KAAM,CAAAC,eAAe,CAAG,gBAAAC,MAAA,CACPF,MAAM,CAAC,YAAY,CAAC,8BAAAE,MAAA,CACXF,MAAM,CAAC,qBAAqB,CAAC,MACrD,4BAA4B,CAC7B,CAED,IAAK,KAAM,CAACG,GAAG,CAAEC,KAAK,CAAC,EAAI,CAAAC,MAAM,CAACC,OAAO,CAACN,MAAM,CAAC,2BAA2B,CAAC,CAAC,CAAE,CAC9EC,eAAe,CAACM,IAAI,UAAAL,MAAA,CAASC,GAAG,SAAAD,MAAA,CAAME,KAAK,CAAE,CAAC,CAChD,CAEA,KAAM,CAAAI,kBAAkB,CAAGH,MAAM,CAACI,IAAI,CAACT,MAAM,CAAC,CAACU,IAAI,CAAEP,GAAG,EACtDA,GAAG,CAACQ,UAAU,CAAC,8CAA8C,CAC/D,CAAC,CACDV,eAAe,CAACM,IAAI,IAAAL,MAAA,CAAIM,kBAAkB,OAAAN,MAAA,CAAKF,MAAM,CAACQ,kBAAkB,CAAC,CAAE,CAAC,CAE5E,MAAO,CAAAP,eAAe,CAACW,IAAI,CAAC,IAAI,CAAC,CACnC,CAEA,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,KAAM,CAACb,MAAM,CAAEc,SAAS,CAAC,CAAGrB,QAAQ,CAAC,IAAI,CAAC,CAE1C,KAAM,CAAAsB,gBAAgB,CAAG,KAAO,CAAAC,IAAI,EAAK,CACvC,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,mCAAmC,CAAE,CAChEC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAEC,IAAI,CAAER,IAAK,CAAC,CACrC,CAAC,CAAC,CAEF,GAAIC,QAAQ,CAACQ,EAAE,CAAE,CACf,KAAM,CAAAC,UAAU,CAAG,KAAM,CAAAT,QAAQ,CAACU,IAAI,CAAC,CAAC,CACxC,KAAM,CAAA1B,eAAe,CAAGF,YAAY,CAAC2B,UAAU,CAAC,CAChDZ,SAAS,CAACb,eAAe,CAAC,CAC5B,CAAC,IAAM,CACL2B,OAAO,CAACC,KAAK,CAAC,0BAA0B,CAAC,CAC3C,CACF,CAAE,MAAOA,KAAK,CAAE,CACdD,OAAO,CAACC,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CACtD,CACF,CAAC,CAED,mBACEjC,IAAA,QAAKkC,SAAS,CAAC,KAAK,CAAAC,QAAA,cAClBjC,KAAA,WAAQgC,SAAS,CAAC,YAAY,CAAAC,QAAA,eAC5BnC,IAAA,OAAIkC,SAAS,CAAC,SAAS,CAAAC,QAAA,CAAC,gDAA8C,CAAI,CAAC,cAC3EnC,IAAA,CAACF,SAAS,EAACoC,SAAS,CAAC,aAAa,CAACE,QAAQ,CAAEjB,gBAAiB,CAAE,CAAC,EAC3D,CAAC,CACN,CAAC,CAEV,CAEA,cAAe,CAAAF,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}