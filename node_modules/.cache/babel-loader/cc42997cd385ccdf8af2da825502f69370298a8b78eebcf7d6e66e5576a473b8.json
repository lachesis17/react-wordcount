{"ast":null,"code":"var _jsxFileName = \"C:\\\\Python_Tools\\\\React_Words\\\\react-wordcount\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useState } from 'react';\nimport './App.css';\nimport TextInput from './TextInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction formatResult(result) {\n  const formattedResult = [`Word count: ${result['Word count']},`, `Average word length: ${result['Average word length']},`, 'Number of words of length:'];\n  for (const [key, value] of Object.entries(result['Number of words of length'])) {\n    formattedResult.push(`  - \"${key}\": ${value}`);\n  }\n  formattedResult.push(`The most frequently occurring word length is ${result['The most frequently occurring word length is 1 for word lengths of']} for word lengths of: ${result['The most frequently occurring word length is 1 for word lengths of']}`);\n  return formattedResult.join('\\n');\n}\nfunction App() {\n  _s();\n  const [result, setResult] = useState(null);\n  const handleTextSubmit = async text => {\n    try {\n      const response = await fetch('http://localhost:5000/count-words', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          file: text\n        })\n      });\n      if (response.ok) {\n        const resultData = await response.json();\n        const formattedResult = formatResult(resultData);\n        setResult(formattedResult); // Simply set the state with the formatted result\n      } else {\n        console.error('Server returned an error');\n      }\n    } catch (error) {\n      console.error('Error occurred during fetch:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Gimme some words. I will count them and stuff.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n        onSubmit: handleTextSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), result && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Analysis Result:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this), result]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"X4bz0btR6WTE+CkTerVmRyY/5iQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","TextInput","jsxDEV","_jsxDEV","formatResult","result","formattedResult","key","value","Object","entries","push","join","App","_s","setResult","handleTextSubmit","text","response","fetch","method","headers","body","JSON","stringify","file","ok","resultData","json","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","_c","$RefreshReg$"],"sources":["C:/Python_Tools/React_Words/react-wordcount/src/App.js"],"sourcesContent":["// App.js\nimport React, { useState } from 'react';\nimport './App.css';\nimport TextInput from './TextInput';\n\nfunction formatResult(result) {\n  const formattedResult = [\n    `Word count: ${result['Word count']},`,\n    `Average word length: ${result['Average word length']},`,\n    'Number of words of length:',\n  ];\n\n  for (const [key, value] of Object.entries(result['Number of words of length'])) {\n    formattedResult.push(`  - \"${key}\": ${value}`);\n  }\n\n  formattedResult.push(\n    `The most frequently occurring word length is ${result['The most frequently occurring word length is 1 for word lengths of']} for word lengths of: ${result['The most frequently occurring word length is 1 for word lengths of']}`\n  );\n\n  return formattedResult.join('\\n');\n}\n\nfunction App() {\n  const [result, setResult] = useState(null);\n\n  const handleTextSubmit = async (text) => {\n    try {\n      const response = await fetch('http://localhost:5000/count-words', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ file: text }),\n      });\n  \n      if (response.ok) {\n        const resultData = await response.json();\n        const formattedResult = formatResult(resultData);\n        setResult(formattedResult); // Simply set the state with the formatted result\n      } else {\n        console.error('Server returned an error');\n      }\n    } catch (error) {\n      console.error('Error occurred during fetch:', error);\n    }\n  };\n  \n  \n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Gimme some words. I will count them and stuff.</h1>\n        <TextInput onSubmit={handleTextSubmit} />\n\n        {result && (\n          <div>\n            <h2>Analysis Result:</h2>\n            {result}\n          </div>\n        )}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}